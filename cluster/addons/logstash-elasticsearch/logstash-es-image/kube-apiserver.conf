input {
 file {
  path         => ['/var/log/kube-apiserver.log']
  sincedb_path => "/var/log/kube-apiserver.log.logstash_sincedb"
  type         => "kube-apiserver"
  codec        => multiline {
    patterns_dir => [ "/etc/logstash/patterns" ]
    pattern      => "%{GLOG_PREFIX}"
    negate       => true
    what         => "previous"
  }
 }
}

filter {
  ruby {
    code => "
    event.to_hash.keys.each { |k| event[ k.gsub('.','_') ] = event.remove(k) if k.include?'.' }
    "
  }
  if [type] == "kube-apiserver" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns" ]
      match        => {
        "message" => "%{GLOG_PREFIX}%{SPACE}%{KUBE_API_LOG:log_message}"
      }
    }
    if !([request_uri]) {
      # This is matching non api requests
      # such as error messages
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match        => {
          "message" => "%{GLOG_PREFIX}%{SPACE}%{GREEDYDATA:log_message}"
        }
        remove_tag => ["_grokparsefailure"]
      }
    }
    if [request_uri] {
      grok {
        match     => {
          "request_uri" => "/(?<action>(api|apis/extensions))/(?<api_version>[^/]+)/((?<verb>(watch|proxy|redirect))/)?(%{GREEDYDATA:temp_data})"
        }
      }
      if !([action]) {
        grok {
          match     => {
            "request_uri" => "/(?<action>[^/]+)(%{GREEDYDATA:misc})"
          }
          remove_tag => ["_grokparsefailure"]
        }
      }
      else {
        grok {
          match     => { "temp_data" => "(namespaces/(?<namespace>[^/]+)/)?(%{GREEDYDATA:temp_data})" }
          overwrite => [ "temp_data" ]
        }
        grok {
          match => { "temp_data" => "(?<resource>[^/\?]+)(/(?<resource_name>[^/\?]+))?(/(?<sub_resource>[^/\?]+))?((%{GREEDYDATA:request_params}))" }
        }
        mutate {
          remove_field => [ "request_uri", "temp_data" ]
        }
        if !([verb]) and [method] {
          mutate { add_field => { "verb" => "%{method}" } }
        }
        if !([namespace]) {
          mutate { add_field => { "namespace" => "none" } }
        }
      }
    }
  }
}